From 4c2bad1d72ed1d87df1112b9d14dfdfb300ca4f2 Mon Sep 17 00:00:00 2001
From: Denis Shimizu <denis.shimizu@collabora.com>
Date: Tue, 14 Nov 2023 06:11:11 -0300
Subject: [PATCH 57/68] v4l2codecs: h264enc: Cleanup caps, colorimetry,
 framerate and style

This is an overall fix of how colorimetry, framerate and caps are
handled, with additionall correction regarding GStreamer coding
standard.
Upstream-Status: Pending
---
 sys/v4l2codecs/gstv4l2codech264enc.c | 203 +++++++++++----------------
 1 file changed, 84 insertions(+), 119 deletions(-)

diff --git a/sys/v4l2codecs/gstv4l2codech264enc.c b/sys/v4l2codecs/gstv4l2codech264enc.c
index 6bf249a..505d4e9 100644
--- a/sys/v4l2codecs/gstv4l2codech264enc.c
+++ b/sys/v4l2codecs/gstv4l2codech264enc.c
@@ -42,19 +42,15 @@ enum
   PROP_LAST = PROP_0
 };
 
-#define GST_PAD_SINK_FORMATS "{NV12, YUY2, I420}"
-
 static GstStaticPadTemplate sink_template =
 GST_STATIC_PAD_TEMPLATE (GST_VIDEO_ENCODER_SINK_NAME,
     GST_PAD_SINK, GST_PAD_ALWAYS,
-    GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE (GST_PAD_SINK_FORMATS)
-        ", colorimetry= {bt601,bt709,bt601-full-range,bt709-full-range}")
-    );
+    GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE (GST_V4L2_DEFAULT_VIDEO_FORMATS)));
 
 static GstStaticPadTemplate src_template =
 GST_STATIC_PAD_TEMPLATE (GST_VIDEO_ENCODER_SRC_NAME,
     GST_PAD_SRC, GST_PAD_ALWAYS,
-    GST_STATIC_CAPS ("video/x-h264,alignment=nal,stream-format=byte-stream"));
+    GST_STATIC_CAPS ("video/x-h264,alignment=au,stream-format=byte-stream"));
 
 #define H264ENC_DEFAULT_KEYFRAME_INTERVAL	30
 
@@ -65,7 +61,7 @@ GST_STATIC_PAD_TEMPLATE (GST_VIDEO_ENCODER_SRC_NAME,
 
 /* Scale factor for bitrate (HRD bit_rate_scale: min = 6) */
 #define SX_BITRATE 6
-/* Scale factor for CPB size (HRD cpb_size_scale: min = 4) */
+/* Scale factor for cpb_size (HRD cpb_size_scale: min = 4) */
 #define SX_CPB_SIZE 4
 /* Maximum sizes for common headers (in bits) */
 #define MAX_SPS_HDR_SIZE  16473
@@ -88,8 +84,8 @@ struct _GstV4l2CodecH264Enc
   GstVideoInfo vinfo;
   gint width;
   gint height;
-  gint width_mbs;
-  gint height_mbs;
+  gint width_in_macroblocks;
+  gint height_in_macroblocks;
   guint qp_max, qp_min;
   guint64 targeted_bitrate;
 
@@ -390,7 +386,7 @@ get_sps_aspect_ratio_idc (guint par_n, guint par_d)
   else if (par_n == 2 && par_d == 1)
     return 16;
   else
-    return 0;                   // Extended_SAR for custom ratios
+    return 255;                 // Extended_SAR for custom ratios
 }
 
 /* Begin of code taken from VA plugin */
@@ -398,17 +394,18 @@ typedef struct
 {
   const char *level;
   int idc;
-  int MaxMBPS;
-  int MaxFS;
-  int MaxDpbMbs;
-  int MaxBR;
-  int MaxCPB;
-  int MinCr;
+  int max_macroblocks_per_second;
+  int max_frame_size_in_macroblocks;
+  int max_dpb_macroblocks;
+  int maximum_bitrate;
+  int max_cpb_size;
+  int minimum_compression_ratio;
 } GstVaH264LevelLimits;
 
-static const GstVaH264LevelLimits _va_h264_level_limits[] = {
+static const GstVaH264LevelLimits _h264_level_limits[] = {
     /* *INDENT-OFF* */
-    /* level   idc   MaxMBPS   MaxFS   MaxDpbMbs  MaxBR   MaxCPB  MinCr */
+    /*level, idc, max_macroblocks_per_second, max_frame_size_in_macroblocks,
+          max_dpb_macroblocks, max_bitrate, max_cpb_size, minimum_compression_ratio */
     {"1",   GST_H264_LEVEL_L1, 1485, 99, 396, 64, 175, 2},
     {"1b",  GST_H264_LEVEL_L1B, 1485, 99, 396, 128, 350, 2},
     {"1.1", GST_H264_LEVEL_L1_1, 3000, 396, 900, 192, 500, 2},
@@ -434,26 +431,14 @@ static const GstVaH264LevelLimits _va_h264_level_limits[] = {
 
 /* Enf of code taken from VA Plugin */
 
-// Recursive function to find the greatest common divisor
-static gint
-gcd (int a, int b)
-{
-  if (b == 0)
-    return a;
-  return gcd (b, a % b);
-}
-
-static gint
-find_time_scale_multiplier (int fps_d)
-{
-  guint base_value = 1000;
-  return (fps_d * base_value) / gcd (fps_d, base_value);
-}
-
 static void
 gst_v4l2_codec_h264_enc_init_sps_pps (GstV4l2CodecH264Enc * self,
     GstVideoCodecState * state)
 {
+  gint maximum_bitrate, frame_size_in_macroblocks,
+      macroblocks_per_second, dpb_macroblocks, cpb_size, compression_ratio,
+      minimum_level_index;
+
   memset (&self->sps, 0, sizeof (self->sps));
   memset (&self->sps, 0, sizeof (self->pps));
 
@@ -462,12 +447,10 @@ gst_v4l2_codec_h264_enc_init_sps_pps (GstV4l2CodecH264Enc * self,
   self->sps.constraint_set0_flag = 1;
   self->sps.constraint_set1_flag = 0;
 
-
-  // sps.seq_parameter_set_id = 0; // TODO: Set it properly
   self->sps.chroma_format_idc = 1;      /* YUV 4:2:0 */
 
-  self->sps.pic_width_in_mbs_minus1 = self->width_mbs - 1;
-  self->sps.pic_height_in_map_units_minus1 = self->height_mbs - 1;
+  self->sps.pic_width_in_mbs_minus1 = self->width_in_macroblocks - 1;
+  self->sps.pic_height_in_map_units_minus1 = self->height_in_macroblocks - 1;
 
   self->sps.num_ref_frames = 1; // FIXME: rename according to spec, max_num_ref_frames
   self->sps.num_ref_frames_in_pic_order_cnt_cycle = 2;
@@ -484,103 +467,92 @@ gst_v4l2_codec_h264_enc_init_sps_pps (GstV4l2CodecH264Enc * self,
   self->sps.frame_mbs_only_flag = 1;
 
   // Calculate lowest acceptable level
-  GstStructure *structure;
-  gint fps_n, fps_d;
-  structure = gst_caps_get_structure (state->caps, 0);
-  gst_structure_get_fraction (structure, "framerate", &fps_n, &fps_d);
-  gint n_levels =
-      sizeof (_va_h264_level_limits) / sizeof (_va_h264_level_limits[0]);
+  gint n_levels = G_N_ELEMENTS (_h264_level_limits);
   GValue bitrate = G_VALUE_INIT;
-  g_object_get_property (G_OBJECT (&self->parent), "bitrate", &bitrate);
+  g_object_get_property (G_OBJECT (self), "bitrate", &bitrate);
   self->targeted_bitrate = g_value_get_uint64 (&bitrate);
-  int MaxBR = self->targeted_bitrate;
-  int FS = self->width * self->height / 256;
-  int MBPS = FS * fps_n / fps_d;        // Assuming each macroblock is 16x16
-  int DpbMbs = FS;
-  int CPB = MaxBR;
-  int CR = fps_n / fps_d;
-  gint lowest_level = 0;
-  for (; lowest_level < n_levels; ++lowest_level) {
-    const GstVaH264LevelLimits *level = &_va_h264_level_limits[lowest_level];
-    if (MBPS <= level->MaxMBPS && FS <= level->MaxFS
-        && DpbMbs <= level->MaxDpbMbs && MaxBR <= level->MaxBR
-        && CPB <= level->MaxCPB && CR >= level->MinCr) {
+  maximum_bitrate = self->targeted_bitrate;
+  frame_size_in_macroblocks = self->width * self->height / 256;
+  macroblocks_per_second = frame_size_in_macroblocks * state->info.fps_n / state->info.fps_d;   // Assuming each macroblock is 16x16
+  dpb_macroblocks = frame_size_in_macroblocks;
+  cpb_size = maximum_bitrate;
+  compression_ratio = state->info.fps_n / state->info.fps_d;
+  minimum_level_index = 0;
+  for (; minimum_level_index < n_levels; ++minimum_level_index) {
+    const GstVaH264LevelLimits *level =
+        &_h264_level_limits[minimum_level_index];
+    if (macroblocks_per_second <= level->max_macroblocks_per_second
+        && frame_size_in_macroblocks <= level->max_frame_size_in_macroblocks
+        && dpb_macroblocks <= level->max_dpb_macroblocks
+        && maximum_bitrate <= level->maximum_bitrate
+        && cpb_size <= level->max_cpb_size
+        && compression_ratio >= level->minimum_compression_ratio) {
       break;
     }
   }
-  self->sps.level_idc = _va_h264_level_limits[lowest_level].idc;
+  self->sps.level_idc = _h264_level_limits[minimum_level_index].idc;
   if (self->sps.level_idc == GST_H264_LEVEL_L1B) {
     self->sps.constraint_set3_flag = 1;
   }
   GST_DEBUG_OBJECT (self, "width:%d height:%d targeted_bitrate:%ld",
       self->height, self->height, self->targeted_bitrate);
-  GST_DEBUG_OBJECT (self, "MBPS=%d,FS=%d,DpbMbs=%d,MaxBR=%d,CPB=%d,CR=%d",
-      MBPS, FS, DpbMbs, MaxBR, CPB, CR);
+  GST_DEBUG_OBJECT (self,
+      "macroblocks_per_second=%d,frame_size_in_macroblocks=%d,dpb_macroblocks=%d,maximum_bitrate=%d,cpb_size=%d,compression_ratio=%d",
+      macroblocks_per_second, frame_size_in_macroblocks, dpb_macroblocks,
+      maximum_bitrate, cpb_size, compression_ratio);
   GST_DEBUG_OBJECT (self, "level_idc: %d", self->sps.level_idc);
 
   /* Crop unaligned videos */
   if (self->width & 15 || self->height & 15) {
-    static const guint SubWidthC[] = { 1, 2, 2, 1 };
-    static const guint SubHeightC[] = { 1, 2, 1, 1 };
-    const guint CropUnitX = SubWidthC[self->sps.chroma_format_idc];
-    const guint CropUnitY = SubHeightC[self->sps.chroma_format_idc] *
-        (2 - self->sps.frame_mbs_only_flag);
+    static const guint chroma_subsampling_width[] = { 1, 2, 2, 1 };
+    static const guint chroma_subsampling_height[] = { 1, 2, 1, 1 };
+    const guint crop_unit_x =
+        chroma_subsampling_width[self->sps.chroma_format_idc];
+    const guint crop_unit_y =
+        chroma_subsampling_height[self->sps.chroma_format_idc] * (2 -
+        self->sps.frame_mbs_only_flag);
 
     self->sps.frame_cropping_flag = 1;
     self->sps.frame_crop_left_offset = 0;
-    self->sps.frame_crop_right_offset = (16 * self->width_mbs -
-        self->width) / CropUnitX;
+    self->sps.frame_crop_right_offset = (16 * self->width_in_macroblocks -
+        self->width) / crop_unit_x;
     self->sps.frame_crop_top_offset = 0;
-    self->sps.frame_crop_bottom_offset = (16 * self->height_mbs -
-        self->height) / CropUnitY;
+    self->sps.frame_crop_bottom_offset = (16 * self->height_in_macroblocks -
+        self->height) / crop_unit_y;
   }
   // set colorimetry
-  const gchar *colorimetry;
-  colorimetry = gst_structure_get_string (structure, "colorimetry");
-
-  if (colorimetry) {
-    self->sps.vui_parameters_present_flag = 1;
+  self->sps.vui_parameters_present_flag = 1;
+  if (state->info.colorimetry.range != GST_VIDEO_COLOR_RANGE_UNKNOWN &&
+      state->info.colorimetry.matrix != GST_VIDEO_COLOR_MATRIX_UNKNOWN &&
+      state->info.colorimetry.transfer != GST_VIDEO_TRANSFER_UNKNOWN &&
+      state->info.colorimetry.primaries != GST_VIDEO_COLOR_PRIMARIES_UNKNOWN) {
+
+    self->sps.vui_parameters.video_signal_type_present_flag = 1;
+    self->sps.vui_parameters.video_format = 5;
     self->sps.vui_parameters.colour_description_present_flag = 1;
-    if ((strcmp (colorimetry, "bt709") == 0) ||
-        (strcmp (colorimetry, "bt709-full-range") == 0)) {
-      self->sps.vui_parameters.colour_primaries = 1;
-      self->sps.vui_parameters.transfer_characteristics = 1;
-      self->sps.vui_parameters.matrix_coefficients = 1;
-      if (strcmp (colorimetry, "bt709-full-range") == 0) {
-        self->sps.vui_parameters.video_full_range_flag = 1;
-      }
-    } else if ((strcmp (colorimetry, "bt601") == 0) ||
-        (strcmp (colorimetry, "bt601-full-range") == 0)) {
-      self->sps.vui_parameters.colour_primaries = 6;
-      self->sps.vui_parameters.transfer_characteristics = 6;
-      self->sps.vui_parameters.matrix_coefficients = 6;
-      if (strcmp (colorimetry, "bt601-full-range") == 0) {
-        self->sps.vui_parameters.video_full_range_flag = 1;
-      }
+    self->sps.vui_parameters.colour_primaries =
+        gst_video_color_primaries_to_iso (state->info.colorimetry.primaries);
+    self->sps.vui_parameters.transfer_characteristics =
+        gst_video_transfer_function_to_iso (state->info.colorimetry.transfer);
+    self->sps.vui_parameters.matrix_coefficients =
+        gst_video_color_matrix_to_iso (state->info.colorimetry.matrix);
+    if (state->info.colorimetry.range == GST_VIDEO_COLOR_RANGE_0_255) {
+      self->sps.vui_parameters.video_full_range_flag = 1;
     }
   }
   // set aspect ratio
-  gint par_n, par_d;
-  if (gst_structure_get_fraction (structure, "pixel-aspect-ratio", &par_n,
-          &par_d)) {
-    self->sps.vui_parameters.aspect_ratio_info_present_flag = 1;
-    self->sps.vui_parameters.aspect_ratio_idc =
-        get_sps_aspect_ratio_idc (par_n, par_d);
-    if (self->sps.vui_parameters.aspect_ratio_idc == 255) {
-      self->sps.vui_parameters.sar_width = par_n;
-      self->sps.vui_parameters.sar_height = par_d;
-    }
+  self->sps.vui_parameters.aspect_ratio_info_present_flag = 1;
+  self->sps.vui_parameters.aspect_ratio_idc =
+      get_sps_aspect_ratio_idc (state->info.par_n, state->info.par_d);
+  if (self->sps.vui_parameters.aspect_ratio_idc == 255) {
+    self->sps.vui_parameters.sar_width = state->info.par_n;
+    self->sps.vui_parameters.sar_height = state->info.par_d;
   }
   // set Frame rate
-  if (gst_structure_get_fraction (structure, "framerate", &fps_n, &fps_d)) {
-    self->sps.vui_parameters.timing_info_present_flag = 1;
-    self->sps.vui_parameters.fixed_frame_rate_flag = 1; // Only supports fixed frame rate for now
-    gint multiplier = find_time_scale_multiplier (fps_d);
-    gint time_scale = fps_n * multiplier;
-    self->sps.vui_parameters.time_scale = time_scale;
-    self->sps.vui_parameters.num_units_in_tick =
-        time_scale / (2 * fps_n / fps_d);
-  }
+  self->sps.vui_parameters.timing_info_present_flag = 1;
+  self->sps.vui_parameters.fixed_frame_rate_flag = 1;   // Only supports fixed frame rate for now
+  self->sps.vui_parameters.num_units_in_tick = state->info.fps_d;
+  self->sps.vui_parameters.time_scale = state->info.fps_n * 2;
 
   /* PPS */
   self->pps.id = 0;
@@ -592,11 +564,7 @@ gst_v4l2_codec_h264_enc_init_sps_pps (GstV4l2CodecH264Enc * self,
   self->pps.weighted_bipred_idc = 0;
 
   /* Rate Control */
-
-  // h264_rate_control_step(encoder);
-
   self->pps.chroma_qp_index_offset = 4;
-  // pps.pic_init_qp_minus26 = encoder.rc.qp - 26;
   self->pps.pic_init_qp_minus26 = -13;
   self->pps.second_chroma_qp_index_offset = self->pps.chroma_qp_index_offset;
   self->pps.deblocking_filter_control_present_flag = 1;
@@ -637,8 +605,8 @@ gst_v4l2_codec_h264_enc_set_format (GstVideoEncoder * encoder,
   self->width = state->info.width;
   self->height = state->info.height;
   gst_v4l2_codec_h264_enc_buffers_allocation (encoder);
-  self->width_mbs = (self->width + 15) / 16;
-  self->height_mbs = (self->height + 15) / 16;
+  self->width_in_macroblocks = (self->width + 15) / 16;
+  self->height_in_macroblocks = (self->height + 15) / 16;
   self->first_frame = TRUE;
 
   if (self->output_state)
@@ -646,7 +614,7 @@ gst_v4l2_codec_h264_enc_set_format (GstVideoEncoder * encoder,
 
   caps = gst_caps_new_simple ("video/x-h264",
       "stream-format", G_TYPE_STRING, "byte-stream",
-      "alignment", G_TYPE_STRING, "nal", NULL);
+      "alignment", G_TYPE_STRING, "au", NULL);
 
   self->output_state =
       gst_video_encoder_set_output_state (GST_VIDEO_ENCODER (self),
@@ -884,9 +852,6 @@ gst_v4l2_codec_h264_enc_fill_encode_rc (GstH264Encoder * encoder,
   GstV4l2CodecH264Enc *self = GST_V4L2_CODEC_H264_ENC (encoder);
 
   /* Rate Control */
-
-  //h264_rate_control_step(encoder);
-
   self->encode_rc.qp = self->pps.pic_init_qp_minus26 + 26;      //encoder->rc.qp;
   self->encode_rc.qp_min = self->qp_min;
   self->encode_rc.qp_max = self->qp_max;
-- 
2.25.1

