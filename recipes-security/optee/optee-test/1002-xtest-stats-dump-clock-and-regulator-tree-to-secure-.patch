From f9928e63378a16ab639d530cc787f2d6b6f77609 Mon Sep 17 00:00:00 2001
From: Etienne Carriere <etienne.carriere@foss.st.com>
Date: Wed, 22 Nov 2023 14:01:12 +0100
Subject: [PATCH 2/2] xtest: stats: dump clock and regulator tree to secure
 console

Add 'xtest --stats' options '--clocks' and '--regulators' to
respectively dump OP-TEE core clock tree and regulator tree to
the secure console.

Change-Id: I3b1cc5a04f4287c1385e75d8c4ba1f1c4837243c
Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
Signed-off-by: Etienne Carriere <etienne.carriere@foss.st.com>
---
Upstream-Status: Backport

 host/xtest/stats.c | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/host/xtest/stats.c b/host/xtest/stats.c
index 5be66f3..a9c5270 100644
--- a/host/xtest/stats.c
+++ b/host/xtest/stats.c
@@ -32,6 +32,8 @@ static int usage(void)
 	fprintf(stderr, " --alloc        Print allocation statistics\n");
 	fprintf(stderr, " --memleak      Dump memory leak data on secure console\n");
 	fprintf(stderr, " --ta           Print loaded TAs context\n");
+	fprintf(stderr, " --clocks       Dump clock tree on secure console\n");
+	fprintf(stderr, " --regulators   Dump regulator tree on secure console\n");
 
 	return EXIT_FAILURE;
 }
@@ -317,6 +319,32 @@ static int stat_system_time(int argc, char *argv[])
 	return close_sess(&ctx, &sess);
 }
 
+static int stat_driver_info(int argc, int driver_type)
+{
+	TEEC_Context ctx = { };
+	TEEC_Session sess = { };
+	TEEC_Result res = TEEC_ERROR_GENERIC;
+	uint32_t eo = 0;
+	TEEC_Operation op = { };
+
+	if (argc != 1)
+		return usage();
+
+	open_sess(&ctx, &sess);
+
+	op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_INPUT,
+					 TEEC_NONE, TEEC_NONE, TEEC_NONE);
+	op.params[0].value.a = driver_type;
+
+	res = TEEC_InvokeCommand(&sess, STATS_CMD_PRINT_DRIVER_INFO, &op, &eo);
+	if (res != TEEC_SUCCESS)
+		errx(EXIT_FAILURE,
+		     "TEEC_InvokeCommand(): res %#"PRIx32" err_orig %#"PRIx32,
+		     res, eo);
+
+	return close_sess(&ctx, &sess);
+}
+
 int stats_runner_cmd_parser(int argc, char *argv[])
 {
 	if (argc > 1) {
@@ -330,6 +358,12 @@ int stats_runner_cmd_parser(int argc, char *argv[])
 			return stat_loaded_ta(argc - 1, argv + 1);
 		if (!strcmp(argv[1], "--time"))
 			return stat_system_time(argc - 1, argv + 1);
+		if (!strcmp(argv[1], "--clocks"))
+			return stat_driver_info(argc - 1,
+						STATS_DRIVER_TYPE_CLOCK);
+		if (!strcmp(argv[1], "--regulators"))
+			return stat_driver_info(argc - 1,
+						STATS_DRIVER_TYPE_REGULATOR);
 	}
 
 	return usage();
-- 
2.25.1

