From 467e86c5cbeb2a2051b31ce2c240d6ddf5bc3112 Mon Sep 17 00:00:00 2001
From: Markus Niebel <Markus.Niebel@tq-group.com>
Date: Mon, 12 Jul 2021 08:25:59 +0200
Subject: [PATCH] Allow running in background with STDIN set to O_NONBLOCKING

Since commit 38986c1 (kmscube: add option to run for specified # of frames)
we have the option of running for a given number of frames. This allows
usage for instance in automatic system tests like climate chamber etc.
To allow starting in background without termination from STDIN add a
new option that prevents polling / selecting for console input.

Signed-off-by: Markus Niebel <Markus.Niebel@tq-group.com>
Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
Upstream-Status: Backport [467e86c5cbeb2a2051b31ce2c240d6ddf5bc3112]
---
 drm-atomic.c | 24 +++++++++++++-----------
 drm-common.c |  3 ++-
 drm-common.h |  7 ++++---
 drm-legacy.c |  6 +++---
 kmscube.c    | 14 ++++++++++----
 texturator.c |  2 +-
 6 files changed, 33 insertions(+), 23 deletions(-)

diff --git a/drm-atomic.c b/drm-atomic.c
index 02771db..037fe8f 100644
--- a/drm-atomic.c
+++ b/drm-atomic.c
@@ -289,15 +289,17 @@ static int atomic_run(const struct gbm *gbm, const struct egl *egl)
 			report_time = cur_time;
 		}
 
-		/* Check for user input: */
-		struct pollfd fdset[] = { {
-			.fd = STDIN_FILENO,
-			.events = POLLIN,
-		} };
-		ret = poll(fdset, ARRAY_SIZE(fdset), 0);
-		if (ret > 0) {
-			printf("user interrupted!\n");
-			return 0;
+		if (!drm.nonblocking) {
+			/* Check for user input: */
+			struct pollfd fdset[] = { {
+				.fd = STDIN_FILENO,
+				.events = POLLIN,
+			} };
+			ret = poll(fdset, ARRAY_SIZE(fdset), 0);
+			if (ret > 0) {
+				printf("user interrupted!\n");
+				return 0;
+			}
 		}
 
 		/*
@@ -392,12 +394,12 @@ static int get_plane_id(void)
 }
 
 const struct drm * init_drm_atomic(const char *device, const char *mode_str,
-		int connector_id, unsigned int vrefresh, unsigned int count)
+		int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	uint32_t plane_id;
 	int ret;
 
-	ret = init_drm(&drm, device, mode_str, connector_id, vrefresh, count);
+	ret = init_drm(&drm, device, mode_str, connector_id, vrefresh, count, nonblocking);
 	if (ret)
 		return NULL;
 
diff --git a/drm-common.c b/drm-common.c
index 40f7112..9ca63aa 100644
--- a/drm-common.c
+++ b/drm-common.c
@@ -270,7 +270,7 @@ static drmModeConnector * find_drm_connector(int fd, drmModeRes *resources,
 }
 
 int init_drm(struct drm *drm, const char *device, const char *mode_str,
-		int connector_id, unsigned int vrefresh, unsigned int count)
+		int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	drmModeRes *resources;
 	drmModeConnector *connector = NULL;
@@ -378,6 +378,7 @@ int init_drm(struct drm *drm, const char *device, const char *mode_str,
 
 	drm->connector_id = connector->connector_id;
 	drm->count = count;
+	drm->nonblocking = nonblocking;
 
 	return 0;
 }
diff --git a/drm-common.h b/drm-common.h
index 4a4f9be..1d50f77 100644
--- a/drm-common.h
+++ b/drm-common.h
@@ -65,6 +65,7 @@ struct drm {
 
 	/* number of frames to run for: */
 	unsigned int count;
+	bool nonblocking;
 
 	int (*run)(const struct gbm *gbm, const struct egl *egl);
 };
@@ -76,10 +77,10 @@ struct drm_fb {
 
 struct drm_fb * drm_fb_get_from_bo(struct gbm_bo *bo);
 
-int init_drm(struct drm *drm, const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count);
+int init_drm(struct drm *drm, const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking);
 int init_drm_render(struct drm *drm, const char *device, const char *mode_str, unsigned int count);
-const struct drm * init_drm_legacy(const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count);
-const struct drm * init_drm_atomic(const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count);
+const struct drm * init_drm_legacy(const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking);
+const struct drm * init_drm_atomic(const char *device, const char *mode_str, int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking);
 const struct drm * init_drm_offscreen(const char *device, const char *mode_str, unsigned int count);
 
 #endif /* _DRM_COMMON_H */
diff --git a/drm-legacy.c b/drm-legacy.c
index e60ea7d..95252f3 100644
--- a/drm-legacy.c
+++ b/drm-legacy.c
@@ -131,7 +131,7 @@ static int legacy_run(const struct gbm *gbm, const struct egl *egl)
 			} else if (ret == 0) {
 				printf("select timeout!\n");
 				return -1;
-			} else if (FD_ISSET(0, &fds)) {
+			} else if (FD_ISSET(0, &fds) && !drm.nonblocking) {
 				printf("user interrupted!\n");
 				return 0;
 			}
@@ -170,11 +170,11 @@ static int legacy_run(const struct gbm *gbm, const struct egl *egl)
 }
 
 const struct drm * init_drm_legacy(const char *device, const char *mode_str,
-		int connector_id, unsigned int vrefresh, unsigned int count)
+		int connector_id, unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	int ret;
 
-	ret = init_drm(&drm, device, mode_str, connector_id, vrefresh, count);
+	ret = init_drm(&drm, device, mode_str, connector_id, vrefresh, count, nonblocking);
 	if (ret)
 		return NULL;
 
diff --git a/kmscube.c b/kmscube.c
index e8a47a9..e9caadf 100644
--- a/kmscube.c
+++ b/kmscube.c
@@ -41,7 +41,7 @@ static const struct egl *egl;
 static const struct gbm *gbm;
 static const struct drm *drm;
 
-static const char *shortopts = "Ac:D:f:gM:m:n:Op:S:s:V:v:x";
+static const char *shortopts = "Ac:D:f:gM:m:n:NOp:S:s:V:v:x";
 
 static const struct option longopts[] = {
 	{"atomic", no_argument,       0, 'A'},
@@ -58,12 +58,13 @@ static const struct option longopts[] = {
 	{"video",  required_argument, 0, 'V'},
 	{"vmode",  required_argument, 0, 'v'},
 	{"surfaceless", no_argument,  0, 'x'},
+	{"nonblocking", no_argument,  0, 'N'},
 	{0, 0, 0, 0}
 };
 
 static void usage(const char *name)
 {
-	printf("Usage: %s [-ADfgMmSsVvx]\n"
+	printf("Usage: %s [-ADfgMmNSsVvx]\n"
 			"\n"
 			"options:\n"
 			"    -A, --atomic             use atomic modesetting and fencing\n"
@@ -88,6 +89,7 @@ static void usage(const char *name)
 			"    -v, --vmode=VMODE        specify the video mode in the format\n"
 			"                             <mode>[-<vrefresh>]\n"
 			"    -x, --surfaceless        use surfaceless mode, instead of gbm surface\n"
+			"    -N, --nonblocking        do not poll for input\n"
 			,
 			name);
 }
@@ -113,6 +115,7 @@ int main(int argc, char *argv[])
 	unsigned int vrefresh = 0;
 	unsigned int count = ~0;
 	bool surfaceless = false;
+	bool nonblocking = false;
 
 #ifdef HAVE_GST
 	gst_init(&argc, &argv);
@@ -169,6 +172,9 @@ int main(int argc, char *argv[])
 		case 'n':
 			connector_id = strtoul(optarg, NULL, 0);
 			break;
+		case 'N':
+			nonblocking = true;
+			break;
 		case 'O':
 			offscreen = 1;
 			break;
@@ -216,9 +222,9 @@ int main(int argc, char *argv[])
 	if (offscreen)
 		drm = init_drm_offscreen(device, mode_str, count);
 	else if (atomic)
-		drm = init_drm_atomic(device, mode_str, connector_id, vrefresh, count);
+		drm = init_drm_atomic(device, mode_str, connector_id, vrefresh, count, nonblocking);
 	else
-		drm = init_drm_legacy(device, mode_str, connector_id, vrefresh, count);
+		drm = init_drm_legacy(device, mode_str, connector_id, vrefresh, count, nonblocking);
 	if (!drm) {
 		printf("failed to initialize %s DRM\n",
 		       offscreen ? "offscreen" :
diff --git a/texturator.c b/texturator.c
index 7aa34ee..2a2ec85 100644
--- a/texturator.c
+++ b/texturator.c
@@ -950,7 +950,7 @@ int main(int argc, char *argv[])
 	print_summary();
 
 	/* no real need for atomic here: */
-	drm = init_drm_legacy(device, mode_str, -1, vrefresh, ~0);
+	drm = init_drm_legacy(device, mode_str, -1, vrefresh, ~0, false);
 	if (!drm) {
 		printf("failed to initialize DRM\n");
 		return -1;
